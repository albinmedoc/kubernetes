apiVersion: batch/v1
kind: CronJob
metadata:
  name: mariadb-backup
  namespace: mariadb12
  labels:
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/component: backup
    app.kubernetes.io/managed-by: kubectl
spec:
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: mariadb
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
            - name: mariadb-backup
              image: mariadb:12.0.2
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  
                  # Generate timestamp for backup filename
                  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                  BACKUP_FILE="/backups/${TIMESTAMP}.sql"
                  
                  echo "Starting backup at $(date)"
                  echo "Backup file: ${BACKUP_FILE}"
                  
                  # Check if MariaDB is accessible before backup
                  echo "Checking MariaDB connectivity..."
                  if ! mariadb --host=mariadb.mariadb12.svc.cluster.local --port=3306 --user=root --password="${MARIADB_ROOT_PASSWORD}" -e "SELECT 1;" &>/dev/null; then
                    echo "ERROR: Cannot connect to MariaDB server"
                    exit 1
                  fi
                  echo "MariaDB connectivity confirmed"
                  
                  # Perform the backup
                  echo "Starting database dump..."
                  mariadb-dump \
                    --host=mariadb.mariadb12.svc.cluster.local \
                    --port=3306 \
                    --user=root \
                    --password="${MARIADB_ROOT_PASSWORD}" \
                    --single-transaction \
                    --routines \
                    --triggers \
                    --all-databases > "${BACKUP_FILE}"
                  
                  echo "Database dump completed, starting compression..."
                  
                  # Compress the backup
                  gzip "${BACKUP_FILE}"
                  
                  # Verify backup integrity
                  echo "Verifying backup integrity..."
                  if ! gzip -t "${BACKUP_FILE}.gz"; then
                    echo "ERROR: Backup file is corrupted!"
                    rm -f "${BACKUP_FILE}.gz"
                    exit 1
                  fi
                  echo "Backup integrity verification passed"
                  
                  # Get final backup size
                  BACKUP_SIZE=$(ls -lh "${BACKUP_FILE}.gz" | awk '{print $5}')
                  echo "Backup completed successfully: ${BACKUP_FILE}.gz"
                  echo "Backup size: ${BACKUP_SIZE}"
                  
                  # Clean up old backups with detailed logging
                  echo "Cleaning up old backups (keeping last ${BACKUP_RETENTION_DAYS} days)..."
                  echo "Files to be removed:"
                  OLD_FILES=$(find /backups -name "*.sql.gz" -type f -mtime +${BACKUP_RETENTION_DAYS} -print)
                  
                  if [ -n "$OLD_FILES" ]; then
                    echo "$OLD_FILES"
                    find /backups -name "*.sql.gz" -type f -mtime +${BACKUP_RETENTION_DAYS} -delete
                    echo "Old backup files cleaned up successfully"
                  else
                    echo "No old backup files found to clean up"
                  fi
                  
                  # Show current backup inventory
                  echo "Current backup inventory:"
                  ls -lah /backups/*.sql.gz 2>/dev/null | tail -10 || echo "No backup files found"
                  
                  echo "Backup process completed successfully at $(date)"
              env:
                - name: MARIADB_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mariadb-secrets
                      key: MARIADB_ROOT_PASSWORD
                - name: BACKUP_RETENTION_DAYS
                  valueFrom:
                    secretKeyRef:
                      name: mariadb-secrets
                      key: BACKUP_RETENTION_DAYS
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "1Gi"
                  cpu: "500m"
              volumeMounts:
                - name: backup-storage
                  mountPath: /backups
          volumes:
            - name: backup-storage
              nfs:
                path: /mnt/Datapool1/Kubernetes/databases/mariadb12/backups
                server: 192.168.86.109